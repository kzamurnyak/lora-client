import { Injectable } from '@angular/core';
import ClientError from "../types/ClientError";
import * as i0 from "@angular/core";
var MessageStatus;
(function (MessageStatus) {
    MessageStatus[MessageStatus["Pending"] = 0] = "Pending";
    MessageStatus[MessageStatus["Sent"] = 1] = "Sent";
})(MessageStatus || (MessageStatus = {}));
export class LoraClientService {
    url = undefined;
    socket = null;
    shouldReconnect = false;
    isConnected = false;
    messages = [];
    messagesQueue = [];
    messageListeners = [];
    connect(url) {
        this.url = url;
        if (!this.url) {
            throw new ClientError('Can not start connection: server url not set.');
        }
        if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {
            throw new ClientError('WebSocket connection is already open or opening.');
        }
        let resolvePromise;
        let rejectPromise;
        const promise = new Promise((resolve, reject) => {
            resolvePromise = resolve;
            rejectPromise = reject;
        });
        this.shouldReconnect = true;
        try {
            this.socket = new WebSocket(this.url);
            this.socket.onopen = () => {
                this.isConnected = true;
                console.log('Socket opened');
                // this.notifyConnectionStatusChange();
                // this.startHeartbeat();
                resolvePromise();
            };
            this.socket.onmessage = (event) => {
                const response = event.data;
                console.log(response + '');
                if (response === 'ping' || response === 'pong') {
                    return;
                }
                console.log('MESSAGE RECEIVED', response);
                const message = { id: crypto.randomUUID(), user: 'lora', content: response, time: Date.now() };
                this.addMessage(message);
            };
            this.socket.onclose = () => {
                console.log('Socket closed');
                this.isConnected = false;
                // this.notifyConnectionStatusChange();
                // this.stopHeartbeat();
                if (this.shouldReconnect) {
                    // this.scheduleReconnect();
                }
            };
            this.socket.onerror = (event) => {
                // console.error('WebSocket error:', event);
                rejectPromise?.(event);
            };
        }
        catch (e) {
            console.log("ERROR", e);
            return;
        }
        return promise;
    }
    sendMessage(message) {
        this.pushMessageToQueue(message);
        this.processQueue();
    }
    processQueue() {
        const message = this.messagesQueue.pop();
        if (!message)
            return;
        this.addMessage({ id: message.id, user: 'me', time: Date.now(), content: message.content });
        this.socket?.send(message?.content);
        message.status = MessageStatus.Sent;
    }
    pushMessageToQueue(message) {
        const id = crypto.randomUUID();
        this.messagesQueue.push({
            id,
            content: message,
            status: MessageStatus.Pending
        });
    }
    addMessage(message) {
        this.messages.push(message);
        this.messageListeners.forEach(listener => {
            listener(message);
        });
    }
    listenMessages(listener) {
        this.messageListeners.push(listener);
    }
    getMessages() {
        return [...this.messages];
    }
    disconnect() {
        this.messages = [];
        this.messagesQueue = [];
        if (this.socket) {
            this.socket.close(1000, "Closed by client");
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: LoraClientService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: LoraClientService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: LoraClientService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,